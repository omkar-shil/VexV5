{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT20)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nchain = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nintake = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)\narm = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nclamp = DigitalOut(brain.three_wire_port.h)\ndoinker = DigitalOut(brain.three_wire_port.g)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    drivetrain.set_drive_velocity(35, PERCENT)\n    drivetrain.set_turn_velocity(35, PERCENT)\n    chain.set_velocity(360,RPM)\n    intake.set_velocity(100,PERCENT)\n    arm.set_velocity(100,PERCENT)\ndef autonomous():\n    clamp.set(True)\n    intake.spin(FORWARD)\n    chain.spin(FORWARD)\n    drivetrain.turn_for(RIGHT,240,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    wait(1,SECONDS)\n    drivetrain.turn_for(RIGHT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    drivetrain.turn_for(RIGHT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,72,INCHES)\n    drivetrain.drive_for(REVERSE,24,INCHES)\n    drivetrain.turn_for(LEFT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,10,INCHES)\n    drivetrain.drive_for(REVERSE,10,INCHES)\n    drivetrain.turn_for(RIGHT,180,DEGREES)\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    drivetrain.drive_for(REVERSE,67.88226,DEGREES)\n    clamp.set(False)\n    drivetrain.drive_for(FORWARD,67.88226,DEGREES)\n    drivetrain.turn_for(LEFT,90,DEGREES)\n    drivetrain.drive_for(FORWARD,144,INCHES)\n    clamp.set(True)\n    drivetrain.drive_for(REVERSE,10,INCHES)\n    drivetrain.turn_for(LEFT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    drivetrain.turn_for(LEFT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    drivetrain.turn_for(LEFT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,72,INCHES)\n    drivetrain.drive_for(FORWARD,24,INCHES)\n    drivetrain.turn_for(RIGHT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,24,INCHES)\n    drivetrain.drive_for(REVERSE,24,INCHES)\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    clamp.set(False)\n    \ndef user_control():\n    while True:\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[{"port":[1,4,2,3,20],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[11],"name":"chain","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[13],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[5],"name":"arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[8],"name":"clamp","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[7],"name":"doinker","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}