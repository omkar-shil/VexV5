{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nrollers = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nchain = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\narm_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_36_1, True)\narm_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_36_1, False)\narm = MotorGroup(arm_motor_a, arm_motor_b)\nclamp = DigitalOut(brain.three_wire_port.h)\ndigital_out_f = DigitalOut(brain.three_wire_port.f)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject: Autonoumous Blue Negative Corner\n#\tAuthor: Joejoe and Samarth\n#\tCreated: 1/5/2025\n#\tConfiguration: True\n# \n# ------------------------------------------\n\n# Library imports\nimport math\nimport urandom\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n    clamp.set(True)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    drivetrain.set_drive_velocity(35, PERCENT)\n    drivetrain.set_turn_velocity(30, PERCENT)\n    arm.set_velocity(100, PERCENT)\n    rollers.set_velocity(100, PERCENT)\n    chain.set_velocity(360, RPM)\n    arm.spin_for(FORWARD, 300, DEGREES,wait=True)\n    clamp.set(False)\n    drivetrain.drive_for(REVERSE,47,INCHES,wait=True)\n    clamp.set(True)\n    wait(0.25,SECONDS)\n    rollers.spin(FORWARD)\n    chain.spin(REVERSE)\n    wait(0.75,SECONDS)\n    drivetrain.drive_for(REVERSE,18,INCHES,wait=True)\n    drivetrain.turn_for(LEFT,135,DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD,48,INCHES,wait=True)\n    wait(0.75,SECONDS)\n    drivetrain.turn_for(LEFT,160,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,17,INCHES,wait=True)\n    wait(0.75,SECONDS)\n    drivetrain.drive_for(REVERSE,17,INCHES,wait=True)\n    drivetrain.turn_for(LEFT,60,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,17,INCHES,wait=True)\n    wait(0.75,SECONDS)\n    drivetrain.drive_for(REVERSE,17,INCHES,wait=True)\n    drivetrain.turn_for(LEFT,130,DEGREES,wait=True)\n    drivetrain.drive_for(FORWARD,55,INCHES,wait=True)\n    rollers.stop()\n    chain.stop()\n    \ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    while True:\n        wait(20, MSEC)\n        def when_started1():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            chain.set_velocity(360, RPM)\n            rollers.set_velocity(600, RPM)\n            arm.set_velocity(110, RPM)\n            arm.set_stopping(HOLD)\n            drivetrain.set_drive_velocity(100, PERCENT)\n            drivetrain.set_stopping(BRAKE)\n            batterylvlmin = 1\n\n        def onevent_controller_1buttonB_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            clamp.set(True)\n\n        def onevent_controller_1buttonUp_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            digital_out_f.set(True)\n\n        def onevent_controller_1buttonX_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            clamp.set(False)\n\n        def onevent_controller_1buttonDown_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            digital_out_f.set(False)\n\n        def onevent_controller_1buttonL1_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            chain.spin(REVERSE)\n            rollers.spin(FORWARD)\n\n        def onevent_controller_1buttonL1_released_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            chain.stop()\n            rollers.stop()\n\n        def onevent_controller_1buttonL2_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            chain.spin(FORWARD)\n            rollers.spin(REVERSE)\n\n        def onevent_controller_1buttonL2_released_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            chain.stop()\n            rollers.stop()\n\n        def onevent_controller_1buttonR1_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            arm.spin(REVERSE)\n\n        def onevent_controller_1buttonR2_released_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            arm.stop()\n\n        def onevent_controller_1buttonR2_pressed_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            arm.spin(FORWARD)\n\n        def onevent_controller_1buttonR1_released_0():\n            global message1, myVariable, d, Batterylevel, batterylvlmin, sight\n            arm.stop()\n\n        # system event handlers\n        controller_1.buttonB.pressed(onevent_controller_1buttonB_pressed_0)\n        controller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\n        controller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\n        controller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\n        controller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)\n        controller_1.buttonL1.released(onevent_controller_1buttonL1_released_0)\n        controller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)\n        controller_1.buttonL2.released(onevent_controller_1buttonL2_released_0)\n        controller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\n        controller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\n        controller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\n        controller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)\n        # add 15ms delay to make sure events are registered correctly.\n        wait(15, MSEC)\n\n        when_started1()\n        \n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()","textLanguage":"python","robotConfig":[{"port":[2,3,1,4,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[11],"name":"rollers","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[13],"name":"chain","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5,12],"name":"arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[8],"name":"clamp","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[6],"name":"digital_out_f","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}