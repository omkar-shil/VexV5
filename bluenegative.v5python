{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT20)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 2)\nintake = Motor(Ports.PORT11, GearSetting.RATIO_6_1, True)\nchain = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\narm = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nclamp = DigitalOut(brain.three_wire_port.h)\ndoinker = DigitalOut(brain.three_wire_port.g)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    drivetrain.set_drive_velocity(35,PERCENT)\n    drivetrain.set_turn_velocity(35,PERCENT)\n    chain.set_velocity(360,RPM)\n    intake.set_velocity(100,PERCENT)\n    arm.set_velocity(100,PERCENT)\n    drivetrain_inertial.calibrate()\ndef autonomous():\n    drivetrain.drive_for(REVERSE,86,INCHES)\n    arm.set_position(-267,DEGREES)\n    clamp.set(True)\n    chain.spin(FORWARD)\n    intake.spin(FORWARD)\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    drivetrain.turn_for(RIGHT,120,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    drivetrain.turn_for(LEFT,180,DEGREES)\n    drivetrain.drive_for(FORWARD,48,INCHES)\n    drivetrain.drive_for(REVERSE,48,INCHES)\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    drivetrain.turn_for(LEFT,90,DEGREES)\n    drivetrain.drive_for(FORWARD,107.34,INCHES)\n    wait(1,SECONDS)\n    drivetrain.drive_for(REVERSE,7,INCHES)\n    drivetrain.drive_for(FORWARD,7,INCHES)\n    wait(0.75,SECONDS)\n    drivetrain.drive_for(REVERSE,7,INCHES)\n    chain.stop()\n    intake.stop()\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    chain.spin(REVERSE)\n    intake.spin(REVERSE)\n    wait(.75,SECONDS\n    chain.spin(FORWARD)\n    intake.spin(FORWARD)\n    drivetrain.turn_for(RIGHT,360,DEGREES)\n    drivetrain.drive_for(FORWARD,7,INCHES)\n    drivetrain.turn_for(LEFT,450,DEGREES)\n    drivetrain.drive_for(FORWARD,144,INCHES)\n    chain.stop()\n    intake.stop()\n\n\ndef user_control():\n    while True:\n        def when_started1():\n    global myVariable, batterylvlmin, sight\n    chain.set_velocity(350, RPM)\n    rollers.set_velocity(100, PERCENT)\n    arm.set_velocity(110, RPM)\n    arm.set_stopping(HOLD)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_stopping(BRAKE)\n\ndef onevent_controller_1buttonDown_pressed_0():\n    global myVariable, batterylvlmin, sight\n    digital_out_f.set(True)\n\ndef onevent_controller_1buttonUp_pressed_0():\n    global myVariable, batterylvlmin, sight\n    digital_out_f.set(False)\n\ndef onevent_controller_1buttonB_pressed_0():\n    global myVariable, batterylvlmin, sight\n    digital_out_h.set(True)\n\ndef onevent_controller_1buttonX_pressed_0():\n    global myVariable, batterylvlmin, sight\n    digital_out_h.set(False)\n\ndef onevent_controller_1buttonR2_pressed_0():\n    global myVariable, batterylvlmin, sight\n    chain.spin(FORWARD)\n    rollers.spin(REVERSE)\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global myVariable, batterylvlmin, sight\n    chain.spin(REVERSE)\n    rollers.spin(FORWARD)\n\ndef onevent_controller_1buttonR2_released_0():\n    global myVariable, batterylvlmin, sight\n    chain.stop()\n    rollers.stop()\n\ndef onevent_controller_1buttonR1_released_0():\n    global myVariable, batterylvlmin, sight\n    chain.stop()\n    rollers.stop()\n\n# system event handlers\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\ncontroller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\ncontroller_1.buttonB.pressed(onevent_controller_1buttonB_pressed_0)\ncontroller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\ncontroller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,4,2,3,20],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"2:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[11],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[13],"name":"chain","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[5],"name":"arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[8],"name":"clamp","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"doinker","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}